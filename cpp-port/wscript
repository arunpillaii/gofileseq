from waflib import Context, Logs, Options, Task

APPNAME = "fileseq"

top = '.'
out = 'build'


def options(opt):
    opt.load('compiler_cxx')


def configure(ctx):
    ctx.load('compiler_cxx')

    ctx.check_cxx(
        header_name='pcrecpp.h',
        stlib='pcrecpp',
        use='PCRE',
        msg='Checking for static library pcrecpp')


def build(bld):
    opts = dict(
        target = APPNAME,
        source = bld.path.ant_glob(['*.cpp', 'ranges/*.cpp', 'private/*.cpp']),
        includes = ['.', 'ranges', 'private'],
        cxxflags = ["-fPIC"],
        use = "PCRE",
        stlib = "pcrecpp",
    )

    bld.shlib(name="fileseq_shared", **opts)
    bld.stlib(name="fileseq_static", **opts)

    # Install headers
    bld.install_files('${PREFIX}/include/fileseq', bld.path.ant_glob("*.h"))

    # Test
    #
    if _is_test:
        _create_test(bld)


_is_test = False

def test(bld):
    Options.commands = ['build'] + Options.commands

    global _is_test
    _is_test = True


def _create_test(bld):
    tsk = bld.program(
        target = 'TestFileseq',
        source = bld.path.ant_glob([
            'test/main.cc', 
            'test/Test*.cc', 
            'test/gtest/src/gtest-all.cc']),
        includes = [ "test", "test/gtest/include", "test/gtest", "." ],
        stlib = ["pcrecpp", "pcre"],
        use = ["fileseq_static", 'PCRE'],
        cxxflags = ["-Wno-undef", "-g", "-ggdb"],
        defines = ["FILESEQ_TEST_DIR=%s" % bld.path.parent.abspath()],
    )

    bld(
        rule="cd %s && ./${SRC}" % bld.variant_dir,
        source=tsk.target,
        use="test_fileseq",
        always=True,
        )
